// Code generated by MockGen. DO NOT EDIT.
// Source: dicom_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dicom "github.com/suyashkumar/dicom"
)

// MockDICOMService is a mock of DICOMService interface.
type MockDICOMService struct {
	ctrl     *gomock.Controller
	recorder *MockDICOMServiceMockRecorder
}

// MockDICOMServiceMockRecorder is the mock recorder for MockDICOMService.
type MockDICOMServiceMockRecorder struct {
	mock *MockDICOMService
}

// NewMockDICOMService creates a new mock instance.
func NewMockDICOMService(ctrl *gomock.Controller) *MockDICOMService {
	mock := &MockDICOMService{ctrl: ctrl}
	mock.recorder = &MockDICOMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDICOMService) EXPECT() *MockDICOMServiceMockRecorder {
	return m.recorder
}

// ConvertDICOMToPNG mocks base method.
func (m *MockDICOMService) ConvertDICOMToPNG(fileId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDICOMToPNG", fileId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDICOMToPNG indicates an expected call of ConvertDICOMToPNG.
func (mr *MockDICOMServiceMockRecorder) ConvertDICOMToPNG(fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDICOMToPNG", reflect.TypeOf((*MockDICOMService)(nil).ConvertDICOMToPNG), fileId)
}

// GetDICOMAttributes mocks base method.
func (m *MockDICOMService) GetDICOMAttributes(fileId, dicomTag string) (*dicom.Element, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDICOMAttributes", fileId, dicomTag)
	ret0, _ := ret[0].(*dicom.Element)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDICOMAttributes indicates an expected call of GetDICOMAttributes.
func (mr *MockDICOMServiceMockRecorder) GetDICOMAttributes(fileId, dicomTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDICOMAttributes", reflect.TypeOf((*MockDICOMService)(nil).GetDICOMAttributes), fileId, dicomTag)
}

// UploadFile mocks base method.
func (m *MockDICOMService) UploadFile(file io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockDICOMServiceMockRecorder) UploadFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockDICOMService)(nil).UploadFile), file)
}
